<?xml version="1.0" encoding="UTF-8"?>
<!-- Panifex platform Copyright (C) 2013 Mario Krizmanic This library is 
	free software; you can redistribute it and/or modify it under the terms of 
	the GNU Lesser General Public License as published by the Free Software Foundation; 
	either version 2.1 of the License, or any later version. This library is 
	distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; 
	without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR 
	PURPOSE. See the GNU Lesser General Public License for more details. You 
	should have received a copy of the GNU Lesser General Public License along 
	with this library; if not, write to the Free Software Foundation, Inc., 51 
	Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA -->
<chapter version="5.0" xmlns="http://docbook.org/ns/docbook"
	xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="
        http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd
        http://www.w3.org/2001/XInclude http://www.w3.org/2001/XInclude.xsd
        http://www.w3.org/1999/xlink http://www.w3.org/1999/xlink.xsd">

	<title>Creating a SalutationContentVM</title>

	<para>
		The next step consists of creating a view module, which will be named
		SalutationContentVM. View module acts like a special controller for
		the View and its function is to expose data from the Model to the
		View, as well as to provide the required action and logic for user
		requests from the View. To put it briefly, the ViewModel works as an
		abstraction of View and contains the state and behavior of the View,
		but does not give information about any UI components or visual
		elements of the View.

		<figure>
			<title>Creating a Maven project - step 1</title>
			<mediaobject>
				<imageobject>
					<imagedata fileref="img04-create_maven_project_1.png"
						scalefit="1" width="100%" contentdepth="100%" />
				</imageobject>
			</mediaobject>
		</figure>
		

		The important insertions here are:
		<programlisting>
			Package: org.panifex.salute.spi.impl
			Name: SalutationContentVM
		</programlisting>
	</para>

	<para>
		Now we define our SalutationContentVM, which is done inserting the
		following code:
		<programlisting>
			* defining getters and setters for Name
			<![CDATA[

			private String name;

			public
			String getName() {
			return name;
			}

			public void setName(String name) {
			this.name = name;
			}
			]]>
			* defining getters and setters for selected salutation service
			<![CDATA[

			private SalutationService selectedService;

			public
			SalutationService getSelectedService() {
			return selectedService;
			}

			public void setSelectedService(SalutationService selectedService) {
			this.selectedService = selectedService;
			}
			]]>
			* defining getters for currently active salutation services from
			salutationservice-manager
			<![CDATA[

			public List
			<SalutationService> getSalutationServices() {
				return
				SalutationManager.getSalutationServices();
				}
				]]>
				
			* defining the salute command which is executed when the user clicks
			the Salute button on the form (showing the message box which salutes the user)
			<![CDATA[

				@Command
				public void salute() {
				Messagebox.show(selectedService.salute(name));
				}
			
			]]>
			
		</programlisting>
	</para>
</chapter>