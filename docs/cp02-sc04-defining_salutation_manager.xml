<?xml version="1.0" encoding="UTF-8"?>
<!-- Panifex platform Copyright (C) 2013 Mario Krizmanic This library is 
	free software; you can redistribute it and/or modify it under the terms of 
	the GNU Lesser General Public License as published by the Free Software Foundation; 
	either version 2.1 of the License, or any later version. This library is 
	distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; 
	without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR 
	PURPOSE. See the GNU Lesser General Public License for more details. You 
	should have received a copy of the GNU Lesser General Public License along 
	with this library; if not, write to the Free Software Foundation, Inc., 51 
	Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA -->
<section version="5.0" xmlns="http://docbook.org/ns/docbook"
	xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="
        http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd
        http://www.w3.org/2001/XInclude http://www.w3.org/2001/XInclude.xsd
        http://www.w3.org/1999/xlink http://www.w3.org/1999/xlink.xsd">

	<title>Defining SalutationManager</title>

	<para>
		We now need to define SalutationManager, which is done by
		creating a new Java class as such:
		
		
		<figure>
			<title>Creating a Maven project - step 1</title>
			<mediaobject>
				<imageobject>
					<imagedata fileref="img04-create_maven_project_1.png"
						scalefit="1" width="100%" contentdepth="100%" />
				</imageobject>
			</mediaobject>
		</figure>
		
	</para>

	<para>
		Here it is necessary to insert:
		<programlisting>
			Package: org.panifex.salute.spi.impl
			Name: SalutationManager
		</programlisting>

		This Manager will dynamically subscribe to implementations of
		SalutationService, and is a singleton which means there will be
		only one active instance because the information about currently
		active implementations will be given only from a single place. 
		The code is as follows:

		<programlisting>
			*setting up singleton:
			
			private static SalutationManager manager;
			public static
			SalutationManager init() {
			if (manager == null) {
			manager = new
			SalutationManager();
			}
			return manager;
			}
			
		</programlisting>

		<programlisting>
			<![CDATA[
			* defining subscription to SalutationService:
			
			@Inject
			@ReferenceList(
			availability = "optional",
			serviceInterface =
			SalutationService.class,
			referenceListeners = @ReferenceListener(ref =
			"salutationManager"))
			private List
			<SalutationService>
				salutationServices = new ArrayList<>();
				@Bind
				public void
				bind(SalutationService salutationService) {
				if
				(salutationService !=
				null) {
				salutationServices.add(salutationService);
				}
				}
				@Unbind
				public
				void
				unbind(SalutationService salutationService) {
				if
				(salutationService !=
				null) {
				salutationServices.remove(salutationService);
				}
				}
				]]>
			</programlisting>
			<programlisting>
				* setting up a static method which provides a list of currently
				active salutation service implementations
				<![CDATA[

				public static List
				<SalutationService>
					getSalutationServices() {
					return
					init().salutationServices;
					}
				]]>
			</programlisting>
			<programlisting>
				* what is left is to annotate the SalutationManager
				

					@Bean
					<footnote>
						<para>By this annotation we annotate a bean. The bean id might be
							automatically generated by the annotation service in the future.
						</para>
					</footnote>
					(id = "salutationManager", factoryMethod =
					"init")
					@ReferenceListener
					<footnote>
						<para>Using this annotation we annotate a certain bean class.
						</para>
					</footnote>
					public class SalutationManager {
					..
					}<![CDATA[
				</SalutationService>
			</SalutationService>
			]]>
		</programlisting>
	</para>
</section>